import os
import zipfile
import json
import asyncio
import csv
import shutil
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# üîπ –ü—É—Ç–∏
TAKEOUT_FOLDER = "takeout_monitor"
EXTRACT_FOLDER = "takeout_data"
PROCESSED_FOLDER = "processed_data"
ARCHIVE_FOLDER = "processed_archives"

# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
SERVICE_HANDLERS = {}

def register_service(service_name):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤."""
    def decorator(func):
        SERVICE_HANDLERS[service_name.lower()] = func
        return func
    return decorator

# 1Ô∏è‚É£ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ —Å –∞—Ä—Ö–∏–≤–∞–º–∏**
async def monitor_takeout():
    """–°–ª–µ–¥–∏—Ç –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ –≤ –ø–∞–ø–∫–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç."""
    logging.info(f"üì° –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–ø–∫–∏ {TAKEOUT_FOLDER}...")
    
    processed_files = set()
    
    while True:
        files = os.listdir(TAKEOUT_FOLDER)
        
        for file in files:
            if file.endswith(".zip") and file not in processed_files:
                logging.info(f"üìÇ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –∞—Ä—Ö–∏–≤: {file}")
                zip_path = os.path.join(TAKEOUT_FOLDER, file)
                
                await extract_takeout(zip_path)
                await process_takeout_data(EXTRACT_FOLDER)

                # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
                shutil.move(zip_path, os.path.join(ARCHIVE_FOLDER, file))
                processed_files.add(file)
        
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

# 2Ô∏è‚É£ **–†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ Google Takeout**
async def extract_takeout(zip_path):
    """–†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç Google Takeout."""
    os.makedirs(EXTRACT_FOLDER, exist_ok=True)
    
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(EXTRACT_FOLDER)
    
    logging.info(f"‚úÖ –ê—Ä—Ö–∏–≤ {zip_path} –∏–∑–≤–ª–µ—á–µ–Ω –≤ {EXTRACT_FOLDER}")

# 3Ô∏è‚É£ **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö**
async def process_takeout_data(folder_path):
    """–ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Ñ–∞–π–ª–∞–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ Google."""
    for root, _, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            service_name = get_service_name(file_path)

            if service_name and service_name in SERVICE_HANDLERS:
                logging.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ {service_name}: {file_path}")
                await SERVICE_HANDLERS[service_name](file_path)
            else:
                logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª: {file_path}")

# 4Ô∏è‚É£ **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞**
def get_service_name(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫ –∫–∞–∫–æ–º—É —Å–µ—Ä–≤–∏—Å—É –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è."""
    filename = os.path.basename(file_path).lower()
    for service in SERVICE_HANDLERS.keys():
        if service in filename:
            return service
    return None

# 5Ô∏è‚É£ **–û–±—Ä–∞–±–æ—Ç–∫–∞ Google Chrome (–ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞)**
@register_service("chrome")
async def process_chrome(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ Chrome."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        processed_data = [
            {"title": item.get("title"), "url": item.get("url"), "time": item.get("time")}
            for item in data.get("history", [])
        ]
        
        await save_processed_file(file_path, processed_data)
        logging.info(f"üåê –ò—Å—Ç–æ—Ä–∏—è Chrome –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {file_path}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Chrome {file_path}: {e}")

# 6Ô∏è‚É£ **–û–±—Ä–∞–±–æ—Ç–∫–∞ Google Activity (–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)**
@register_service("google_activity")
async def process_google_activity(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Google (–ø–æ–∏—Å–∫, –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ)."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        processed_data = [
            {"activity": item.get("header"), "details": item.get("title"), "time": item.get("time")}
            for item in data.get("activity", [])
        ]
        
        await save_processed_file(file_path, processed_data)
        logging.info(f"üìä Google Activity –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {file_path}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Google Activity {file_path}: {e}")

# 7Ô∏è‚É£ **–û–±—Ä–∞–±–æ—Ç–∫–∞ Gmail (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∏—Å–µ–º)**
@register_service("gmail")
async def process_gmail(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Gmail (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞)."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        processed_data = [
            {"from": email.get("from"), "to": email.get("to"), "subject": email.get("subject"), "date": email.get("date")}
            for email in data.get("emails", [])
        ]
        
        await save_processed_file(file_path, processed_data)
        logging.info(f"üì© Gmail –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {file_path}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Gmail {file_path}: {e}")

# 8Ô∏è‚É£ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö**
async def save_processed_file(original_path, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON –∏ CSV."""
    os.makedirs(PROCESSED_FOLDER, exist_ok=True)

    base_name = os.path.basename(original_path).split('.')[0]
    json_path = os.path.join(PROCESSED_FOLDER, base_name + "_processed.json")
    csv_path = os.path.join(PROCESSED_FOLDER, base_name + "_processed.csv")

    # JSON
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

    # CSV
    if data:
        with open(csv_path, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=data[0].keys())
            writer.writeheader()
            writer.writerows(data)

    logging.info(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {json_path}, {csv_path}")

# 9Ô∏è‚É£ **–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞**
if __name__ == "__main__":
    asyncio.run(monitor_takeout())